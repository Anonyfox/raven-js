/**
 * @author Anonyfox <max@anonyfox.com>
 * @license MIT
 * @see {@link https://github.com/Anonyfox/ravenjs}
 * @see {@link https://ravenjs.dev}
 * @see {@link https://anonyfox.com}
 */

/**
 * Tests for sitemap XML template
 */

import assert from "node:assert";
import { describe, test } from "node:test";
import { sitemapTemplate } from "./sitemap.js";

describe("sitemapTemplate", () => {
	/**
	 * Create mock sitemap data for testing
	 * @returns {Object} Mock sitemap data
	 */
	function createMockSitemapData() {
		return {
			urls: [
				{
					loc: "https://docs.example.com/",
					lastmod: "2024-01-15",
					changefreq: "weekly",
					priority: "1.0",
				},
				{
					loc: "https://docs.example.com/modules/",
					lastmod: "2024-01-15",
					changefreq: "weekly",
					priority: "0.9",
				},
				{
					loc: "https://docs.example.com/modules/utils/",
					lastmod: "2024-01-15",
					changefreq: "monthly",
					priority: "0.7",
				},
			],
			totalUrls: 3,
			generatedAt: "2024-01-15T12:00:00.000Z",
		};
	}

	test("generates valid XML sitemap structure", () => {
		const data = createMockSitemapData();
		const xml = sitemapTemplate(data);

		// Should start with XML declaration
		assert(xml.startsWith('<?xml version="1.0" encoding="UTF-8"?>'));

		// Should include sitemap namespace
		assert(xml.includes('xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'));

		// Should have urlset root element
		assert(xml.includes("<urlset"));
		assert(xml.includes("</urlset>"));

		// Should be well-formed XML (basic check)
		assert(!xml.includes("<<"), "Should not have malformed XML tags");
		assert(!xml.includes(">>"), "Should not have malformed XML tags");
	});

	test("includes all URL entries with proper structure", () => {
		const data = createMockSitemapData();
		const xml = sitemapTemplate(data);

		// Should include all URLs
		for (const url of data.urls) {
			assert(
				xml.includes(`<loc>${url.loc}</loc>`),
				`Should include location: ${url.loc}`,
			);
			assert(
				xml.includes(`<lastmod>${url.lastmod}</lastmod>`),
				`Should include lastmod: ${url.lastmod}`,
			);
			assert(
				xml.includes(`<changefreq>${url.changefreq}</changefreq>`),
				`Should include changefreq: ${url.changefreq}`,
			);
			assert(
				xml.includes(`<priority>${url.priority}</priority>`),
				`Should include priority: ${url.priority}`,
			);
		}

		// Should have proper URL entry structure
		const urlBlocks = xml.match(/<url>[\s\S]*?<\/url>/g);
		assert.strictEqual(
			urlBlocks.length,
			data.urls.length,
			"Should have correct number of URL blocks",
		);
	});

	test("includes metadata comments", () => {
		const data = createMockSitemapData();
		const xml = sitemapTemplate(data);

		// Should include generation comment
		assert(xml.includes("Generated by RavenJS Documentation Generator"));

		// Should include total URLs in comment
		assert(xml.includes(`Total URLs: ${data.totalUrls}`));

		// Should include generation timestamp
		assert(xml.includes(`Generated: ${data.generatedAt}`));
	});

	test("properly escapes XML special characters", () => {
		const dataWithSpecialChars = {
			urls: [
				{
					loc: "https://docs.example.com/path?param=value&other=<test>",
					lastmod: "2024-01-15",
					changefreq: "weekly",
					priority: "1.0",
				},
			],
			totalUrls: 1,
			generatedAt: "2024-01-15T12:00:00.000Z",
		};

		const xml = sitemapTemplate(dataWithSpecialChars);

		// Should escape special characters
		assert(xml.includes("&amp;"), "Should escape ampersands");
		assert(xml.includes("&lt;"), "Should escape less-than");
		assert(xml.includes("&gt;"), "Should escape greater-than");

		// Should not contain unescaped special characters in content
		const locMatch = xml.match(/<loc>(.*?)<\/loc>/);
		assert(locMatch, "Should find location tag");
		assert(
			!locMatch[1].includes("&other="),
			"Should not have unescaped ampersand in location",
		);
		assert(
			!locMatch[1].includes("<test>"),
			"Should not have unescaped less-than/greater-than in location",
		);
	});

	test("handles empty URL list", () => {
		const emptyData = {
			urls: [],
			totalUrls: 0,
			generatedAt: "2024-01-15T12:00:00.000Z",
		};

		const xml = sitemapTemplate(emptyData);

		// Should still generate valid XML structure
		assert(xml.includes('<?xml version="1.0" encoding="UTF-8"?>'));
		assert(xml.includes("<urlset"));
		assert(xml.includes("</urlset>"));
		assert(xml.includes("Total URLs: 0"));

		// Should not have any URL entries
		assert(!xml.includes("<url>"), "Should not have URL entries");
	});

	test("generates properly formatted and indented XML", () => {
		const data = createMockSitemapData();
		const xml = sitemapTemplate(data);

		// Should have proper indentation
		assert(xml.includes("  <url>"), "URL entries should be indented");
		assert(xml.includes("    <loc>"), "URL components should be indented");
		assert(xml.includes("    <lastmod>"), "URL components should be indented");
		assert(xml.includes("  </url>"), "URL closing tags should be indented");

		// Should have newlines for readability
		assert(xml.includes("\n"), "Should contain newlines");
		assert(xml.split("\n").length > 5, "Should have multiple lines");
	});

	test("handles large number of URLs efficiently", () => {
		// Generate data with many URLs
		const urls = [];
		for (let i = 0; i < 1000; i++) {
			urls.push({
				loc: `https://docs.example.com/page-${i}/`,
				lastmod: "2024-01-15",
				changefreq: "monthly",
				priority: "0.5",
			});
		}

		const largeData = {
			urls,
			totalUrls: 1000,
			generatedAt: "2024-01-15T12:00:00.000Z",
		};

		const xml = sitemapTemplate(largeData);

		// Should include all URLs
		assert.strictEqual(
			xml.split("<url>").length - 1,
			1000,
			"Should include all URLs",
		);
		assert(xml.includes("Total URLs: 1000"), "Should show correct total");

		// Should still be valid XML structure
		assert(xml.startsWith("<?xml"), "Should start with XML declaration");
		assert(xml.endsWith("</urlset>"), "Should end with urlset closing tag");
	});
});
